using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["softposit"], :SoftPositPath),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/giordano/SoftPositBuilder/releases/download/v0.4.1a"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    MacOS(:x86_64) => ("$bin_prefix/SoftPosit.v0.4.1.x86_64-apple-darwin14.tar.gz", "c7867252bef549e2c4d7ce3a7ad97f025f5da437204285c3854ec644c03e260f"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/SoftPosit.v0.4.1.x86_64-linux-gnu.tar.gz", "2cbca81bc5df1e26ac6584fd5473e3b392c7704af1d4f704941a4571ab66116d"),
    FreeBSD(:x86_64) => ("$bin_prefix/SoftPosit.v0.4.1.x86_64-unknown-freebsd11.1.tar.gz", "9b9cae14e31d02ea7a7a14f27746bb0d275066c639e5b3524bb5597f08a88b4a"),
    Windows(:x86_64) => ("$bin_prefix/SoftPosit.v0.4.1.x86_64-w64-mingw32.tar.gz", "eef05b15539fd72e8439da176d5e1da7b30b9e4f30214443bacf1f255022f503"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
